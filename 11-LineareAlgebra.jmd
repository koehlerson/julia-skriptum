# Lineare Algebra

Neben der Unterstützung von multi-dimensionalen Arrays (Vektoren, Matrizen, Tensoren) bietet Julia auch eine Implementierung von nützlichen Funktionen der linearen Algebra.
Das lineare Algebra Paket ist standardmäßig in Julia enthalten und kann wie alle anderen Pakete mit `using` geladen werden.

```{julia}
using LinearAlgebra
```

## Lineare Gleichungssysteme

Eine übliche Problemstellung der linearen Algebra ist das Lösen von Gleichungssystemen wie dem folgendem.

```math
   x - y = 22\;\text{und}\;2x + 3y = 11
```

Um das System zu lösen müssen zuerst die Koeffizientenmatrix und der Vektor auf der rechten Seite definiert werden.

```{julia}
A = [1 -1
     2  3]
c = [22, 11]
```

Um Informationen über die Lösbarkeit des System zu erhalten wird die Determinante mit `det` ermittelt.


```{julia}
det(A)
```

Offensichtlich hat das Gleichungssystem eine eindeutige Lösung. 
Im nächsten Schritt muss ``\mathbf{A}`` invertiert werden.

```{julia}
A_inv = inv(A)
```

Der Lösungsvektor ``\mathbf{b}`` ergibt sich dann zu:

```{julia}
b = A_inv*c
```

Die Kontrolle kann einfach durch Ausmultiplizieren gemacht erfolgen.

```{julia}
A*b
```

Da dieser Ablauf sehr häufig vorkommt und sich abhängig von ``\mathbf{A}`` gut optimieren lässt, biete Julia mit dem `\` Operator eine Kurzschreibweise, bei der das Invertieren entfällt.

```{julia}
A\c
```

### Aufgabe: Löse das Gleichungssystem 

```math
   x - y + z = 22\;\text{und}\;2x + 3y = 11\;\text{und}\;10x-y/2+5z=0
```

```{julia;}
A = [1 -1 1
     2  3 0
     10 -0.5 5]
@show det(A)
c = [22, 11, 0]
@show A\c
```

### Aufgabe: Verwende die Funktionen `eigvals` und `eigvecs` 

um die obige Matrix zu Zerlegen und kontrolliere das Ergebnis für den ersten Eigenvektor und 
in dem die Matrix durch die Eigenvektoren und Eigenwerte wieder hergestellt wird.

```{julia;}
A = [1 -1 1
     2  3 0
     10 -0.5 5]
λ = eigvals(A)
ϕ = eigvecs(A)
@show A*ϕ[:,1] ≈ λ[1]*ϕ[:,1]
@show ϕ*Diagonal(λ)*inv(ϕ) ≈ A
```

## Vektorfunktionen

Das lineare Algebra Paket beinhaltet auch Funktionen zur Berechnung des Skalarprodukts `dot` oder `·`, des Kreuzprodukts `cross` oder `×` und der Länge `norm` von Vektoren.

```julia
[1,2,3] ⋅ [4,5,6]
```

```julia
[1,2,3] × [4,5,6]
```

```julia
norm([1,2,3])
```

### Aufgabe: Berechne den Winkel zwischen den Vektoren v1 und v2

```julia
v1 = [1,5]; v2 = [3,7]
acos(v1⋅v2/(norm(v1)*norm(v2)))
```

