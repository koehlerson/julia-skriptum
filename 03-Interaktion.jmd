# Interaktion

Um Julia auszuführen, gibt es verschieden Möglichkeiten:
- Interaktiv in Form der REPL (Read-eval-print loop) über das Programm-Icon oder Eingabe von `julia` in der Commandline.
- Als Skript durch Eingabe von `julia script.jl [arg1, arg2 ...]` in der Commandline (Die eckigen Klammern kennzeichnen optionale Argumente),
- In einem Editor, der Julia unterstützt (z.B. VS Code mit der entsprechenden Erweiterung),
- Als sogenanntes Notebook mit Jupyter.

Jupyter-Notebooks eignen sich, um Berechnungen zu dokumentieren und z.B. um Grafiken und Formeln zu erweitern; dies sprengt aber den Rahmen der LVA.
Für Interessierte ist hier auf das Paket [`IJulia.jl`](https://github.com/JuliaLang/IJulia.jl)\footnote{<https://github.com/JuliaLang/IJulia.jl>} verwiesen, welches Julia für Jupyter-Notebooks aktiviert.

## Die REPL

Die REPL bietet die rudimentärste Methode des Zugriffs auf Julia.
Die Funktionalität, wie es auch im Namen REPL steckt, besteht darin:
1. **R**ead: Einen Befehl einzulesen
2. **E**val: Den eingelesenen Befehl auszuwerten
3. **P**rint: Das Ergebnis auszugeben
4. **L**oop: Zurück zu 1. und auf den nächsten Befehl zu warten

Die REPL kann durch Starten von Julia über das Programm-Icon, den Befehl `julia` oder direkt in VS Code geöffnet werden (Ausführen der Funktion `exit()` oder Drücken von `Strg-D` schließt die REPL wieder).

Je nach Betriebssystem öffnet sich dann ein Fenster das dem in der folgenden Abbildung ähnelt.
![REPL-Fenster direkt nach dem Start](../data/img/repl-01.png)

Nach dem Start steht der Cursor nach dem Text `julia>`, welcher Prompt genannt wird.
Die REPL befindet sich jetzt im \enquote{Julian mode}.
Das bedeutet, jetzt können Julia-Befehle eingegeben und ausgewertet werden.

Die REPL kennt noch drei weitere Modi, die durch Eingabe eines speziellen Zeichens direkt nach der Prompt gestartet werden können:
1. \enquote{Help mode} (`help?>`) durch `?`: Erlaubt die Anzeige der Hilfe für bestimmte Ausdrücke.
2. Paketmanager (`(v1.2) pkg>`) durch `]`: Startet den Paketmanager, mit dem zusätzliche Pakete installiert werden können.
3. \enquote{Shell mode} (`shell>`) durch `;`: Ermöglicht das Ausführen von Befehlen im Betriebssystem.

Der \enquote{Julian mode} ist, wenn der Cursor direkt hinter der Prompt steht, immer durch Dücken der Backspace-Taste erreichbar. 

Die REPL biete eine sogenannte Autovervollständigung für Julia-Befehle.
Wird nur ein Teil eines Befehls eingegeben, kann dieser durch Drücken von `TAB` vervollständigt werden. 
Das ist sehr praktisch, da man sich als BenutzerIn nicht den exakten Wortlaut jedes Befehls merken muss.

## Ausführung als Skript

Eine Julia-Datei oder ein Julia-Skript (Endung `.jl`) kann über die Commandline ausgeführt werden.
Je nach Betriebsystem ist diese über einen anderen Weg erreichbar:
- Windows: Die Commandline verbirgt sich hinter dem Programm cmd.exe. Dieses ist am einfachsten durch die Tastenkombination `windows+r` (Run) und Eingabe von \enquote{cmd}, im erschienenen Fenster, gefolgt von `Enter` erreichbar.
- macOS: In macOS wird die Commandline Terminal genannt. Über die Spotlight-Suche (`cmd+space`) und Eingabe von \enquote{Terminal} gelangt man zu der richtigen App.
- Linux: Linux-User sollten wissen, wie sie zur Commandline gelangen.

Die Commandline ist wie die Julia-REPL aufgebaut und funktioniert nach dem selben Prinzip.
Die wichtigsten Befehle für die Navigation sind:
- `pwd`: Gibt das aktuelle Verzeichnis aus (auch \enquote{Working Directory} genannt).
- `cd pfad`: Wechselt in das Verzeichnis `pfad`.
- `ls`: Listet den Inhalt des aktuellen Verzeichnisses auf.
Diese Befehle genügen zum Lösen der Aufgaben, je nach Betriebssystem sind aber noch sehr viele weitere verfügbar.

Nach der Installation von Julia ist der Befehl `julia` verfügbar.
Soll ein Skript `mein-script.jl` ausgeführt werden, ist das durch Eingabe von `julia mein-script.jl` in der Commandline möglich.
Im Aufruf von Julia gibt `mein-script.jl` dabei der Pfad zu der auszuführenden Datei an.
Bei dieser Angabe handelt es sich um einen sogenannten relativen Pfad, relativ bezogen auf das aktuelle Verzeichnis.
Befindet sich die Datei in einem Unterordner `scripts` würde der Befehl
- unter Windows: `julia scripts\mein-script.jl` und
- unter macOS und Linux: `julia scripts/mein-script.jl`
lauten.
Das Gegenstück zu relativen Pfaden sind absolute Pfade.
Ein absoluter Pfad bezieht sich immer auf das Laufwerk z.B. `C:\` oder `/`.

Generell empfehlen wir, mit relativen Pfaden zu arbeiten, da das Skript dann auf jedem Gerät ohne Anpassung der Pfade ausgeführt werden kann.
Im folgenden Beispiel wird eine Datei `meinedatei.txt` mit einem absoluten und mit einem relativen Pfad geöffnet.

```julia; eval=false
file = open("/Users/someuser/meinedatei.txt") # Absoluter Pfad unter Linux
file = open("C:\\Benuter\\meinedatei.txt") # Absoluter Pfad unter Windows
file = open("meinedatei.txt") # Relativer Pfad
```

Die absoluten Pfade funktioniert nur dann, wenn auf jedem Gerät, auf dem der Befehl ausgeführt wird, auch der Ordner mit dem exakt gleichen Pfad vorhanden ist.
Liegt `meinedatei.txt` allerdings immer im Verzeichnis, in dem das Skript gestartet wird, kann die Datei beim relativen Pfad unabhängig vom Gerät gefunden werden.
Im Windows-Pfad wird als Trennzeichen `\\` verwendet, obwohl der Windows-Pfad eigentlich nur einen einzelnen `\` enthält.
Das ist erforderlich, da `\` einen sogenannten \enquote{Special Character} einleitet. 
Nähere Informationen zu diesem Thema werden im Abschnitt Strings gegeben.

## VS Code Spezifika

VS Code enthält eine integrierte REPL, die über den Befehl `Julia: Start REPL` geöffnet werden kann.
Die Eingabe eines Befehls wird mit der Tastenkombination `Strg`+`Shift`+`P` bzw. `Cmd`+`Shift`+`P` am Mac gestartet.
Diese REPL erscheint danach unter dem Editor-Fenster und unterstützt den vollen Funktionsumfang der Julia REPL.

Neben der REPL sind Befehle auch direkt aus der Datei, die gerade editiert wird, heraus ausführbar.
Durch Drücken von `Alt+Enter` kann der aktuelle Code-Block an die REPL geschickt werden.
Damit können schnell auch größere Codeblöcke ausgeführt werden, da die Funktion automatisch syntaktisch sinnvolle Zeilen aus der Umgebung gruppiert.

```julia; eval=false
function meine_funktion()
    return 10
end

x = 10
y = 12
```

Wird z.B. im oberen Skript `Alt+Enter` in der Zeile `return 10` gedrückt, werden auch die Zeile davor und danach ausgewertet.
Im Gegensatz dazu wird beim Senden der Zeile `x = 10` nur diese Zeile ausgeführt.

Auf der Website der [Julia-Erweiterung für VS Code](https://www.julia-vscode.org/)\footnote{https://www.julia-vscode.org/} sind weitere Funktionen in einer interaktiven Grafik erklärt.

## Spezielle REPL-Modes

### Hilfe

Julia-Quellcode ist selbst-dokumentiert. Das bedeutet, dass die Beschreibung und Hilfe für Funktionen direkt in den Code geschrieben wird. 
Beim Programmieren muss dabei eine Richtlinie eingehalten werden, damit die Hilfe für eine Funktion vom Benutzer auch aufgerufen werden kann (siehe Docstrings im Abschnitt Funktionen).

Wie schon im Abschnitt zur Interaktion beschrieben, gibt es einen eigenen REPL-Mode, der die Hilfe für Funktionen anzeigt.
Dieser Modus kann durch Eingabe von `?` direkt nach `julia>` aktiviert werden. 
Die Prompt sollte sich dann in `help?>` ändern. 
Jetzt kann jede beliebige Funktionen (z.B. `abs` für den Absolutwert einer Zahl) eingegeben werden.
Durch Bestätigen mit Enter erscheint die folgende Ausgabe:

```julia; term=true; eval=false
help?> abs
search: abs abs2 abspath AbstractSet abstract type AbstractChar AbstractDict AbstractFloat AbstractArray AbstractRange AbstractString AbstractVector

  abs(x)

  The absolute value of x.

  When abs is applied to signed integers, overflow may occur, resulting in the return of a negative value. This overflow occurs only when abs is applied to
  the minimum representable value of a signed integer. That is, when x == typemin(typeof(x)), abs(x) == x < 0, not -x as might be expected.

  Examples
  ≡≡≡≡≡≡≡≡≡≡

  julia> abs(-3)
  3

  julia> abs(1 + im)
  1.4142135623730951

  julia> abs(typemin(Int64))
  -9223372036854775808
```

Die Hilfe zu den Funktionen ist auch unter [docs.julialang.org](https://docs.julialang.org) erreichbar. Dort wurde die Dokumentation gesammelt und um nützliche Tipps und Erklärungen erweitert.

Falls Probleme oder Unklarheiten bei der Verwendung von Julia auftreten, gibt es verschiedene Kanäle, über die Fragen gestellt werden können:

- [Stack Overflow](https://stackoverflow.com/questions/tagged/julia)\footnote{<https://stackoverflow.com/questions/tagged/julia>}
- [Discourse](https://discourse.julialang.org/)\footnote{<https://discourse.julialang.org>}
- [Github](https://github.com/)\footnote{<https://github.com>}

Github ist die zentrale Plattform, auf der Julia-Pakete (und auch Julia selbst) verwaltet werden. Findet man einen Fehler, kann man dort eine Nachricht schreiben und direkt mit EntwicklerInnen Kontakt aufnehmen.

### Paketmanager

Julia zeichnet sich durch eine sehr aktive Community aus, die Basiskomponenten der Sprache laufend um neue Funktionen erweitert.
Solche Erweiterungen werden durch Pakete zu Julia hinzugefügt.

Der Paketmanager kann aus der REPL durch Eingabe von `]` direkt nach `julia>` aktiviert werden.
Die Prompt ändert sich dann in `(v1.2) pkg>`.
Der Paketmanager ist ein sehr mächtiges Tool, dessen Funktionsumfang unter [Standard Library/Pkg](https://docs.julialang.org/en/v1/stdlib/Pkg/) dokumentiert ist.
Im Zuge der LVA beschränken wir uns auf das Installieren, Aktualisieren und Entfernen von Paketen.

Ein Paket, z.B. `Example.jl`, kann durch `add` installiert werden:
```julia;term=true; eval=false
(v1.2) pkg> add Example
  Updating registry at `~/.julia/registries/General`
  Updating git-repo `https://github.com/JuliaRegistries/General.git`
 Resolving package versions...
 Installed Example ─ v0.5.3
  Updating `~/.julia/environments/v1.2/Project.toml`
  [7876af07] + Example v0.5.3
  Updating `~/.julia/environments/v1.2/Manifest.toml`
  [7876af07] + Example v0.5.3
```

Gibt es neue Versionen von Paketen, können diese gesammelt mit `update` aktualisiert werden:
```julia;term=true; eval=false
(v1.2) pkg> update
  Updating registry at `~/.julia/registries/General`
  Updating git-repo `https://github.com/JuliaRegistries/General.git`
 Resolving package versions...
  Updating `~/.julia/environments/v1.2/Project.toml`
 [no changes]
  Updating `~/.julia/environments/v1.2/Manifest.toml`
 [no changes]
```

Zum Entfernen eines Pakets kann der Befehl `rm` verwendet werden:
```julia;term=true; eval=false
(v1.2) pkg> rm Example
  Updating `~/.julia/environments/v1.2/Project.toml`
  [7876af07] - Example v0.5.3
  Updating `~/.julia/environments/v1.2/Manifest.toml`
  [7876af07] - Example v0.5.3
```

## Aufgaben

In der LVA werden ein paar ausgewählte Pakete zur Erweiterung von Julia verwendet.
Die erste Aufgabe ist die Installation dieser Pakete auf dem eigenen Computer.

### Installation der für die LVA benötigten Pakete

Die folgenden Pakete sollen mit dem Paketmanager installiert werden.

- `CSV.jl`
- `DataFrames.jl`
- `Plots.jl`
- `Unitful.jl`
- `Measurements.jl`
- `Debugger.jl`
- `RDatasets.jl`
- `Distributions.jl`

Die Aufgabe kann durch Kontrolle eines leeren Codeblocks überprüft werden:

```julia; eval=false
@Aufgabe "3.5.1" begin
end
```
