# Datentypen
Ein grundlegender Baustein von Programmen sind Werte (*values*), wie zum Beispiel Zahlen oder Buchstaben.
Jeder Wert gehört zu einem bestimmten Datentypen.
Dieser Datentyp kann mit der Funktion `typeof()` abgefragt werden:
```julia; term=true
typeof(2)
typeof(42.0)
typeof("hello world")
typeof('c')
typeof(true)
```

## Characters, Strings und Symbols
### Characters
Ein Wert vom Typ `Char` repräsentiert ein einzelnes Zeichen und ist von einfachen Anführungszeichen umgeben.
Dabei kann jedes verfügbare *Unicode*-Zeichen als `Char` verwendet werden:
```julia; term=true
'x'
'α'
typeof('x')
```

### Strings
Strings werden von doppelten Anführungszeichen umgeben.
```julia; term=true
"Das ist ein String"
typeof("19.0")
```
Ein `String` ist eine Aneinanderreihung von `Char`-Werten.
Über eckige Klammern kann auf jedes dieser Zeichen zugegriffen werden:
```julia; term=true
fruit = "banana"
third = fruit[3]
last = fruit[end]
secondlast = fruit[end-1]
```
Nachdem in der ersten Zeile der Variable `fruit` ein `String` zugewiesen wird, greifen die übrigen Zeilen auf diesen `String` zu und weisen jeweils ein Zeichen einer neuen Variablen zu.
Der Ausdruck in den eckigen Klammern heißt dabei *Index* und muss ein Integer sein.
Die Indexierung in Julia startet bei 1, die Variable `third` beinhaltet also das dritte Zeichen des Strings.
Für den Zugriff auf das letzte Zeichen kann der Index `end` verwendet werden.

Neben einzelnen Zeichen besteht auch die Möglichkeit auf einen Teil des Strings zuzugreifen.
Dies erfolgt durch Eingabe des ersten und letzten Index des Teils, getrennt durch einen Doppelpunkt, `:`.
```julia; term=true
fruit[3:end]
```

Die Anzahl der Zeichen eines Strings kann mit der Funktion `length()` abgefragt werden:
```julia; term=true
length("julia")
```

Strings sind nicht veränderbar.
Austauschen eines Zeichens durch Zurgriff auf einen bestimmten Index ist daher nicht möglich.
Julia gibt dann einen *Method-Error* aus.
```julia; term=true
s = "banana"
s[3:end] = "nane"
```
Mittels `replace()` kann allerdings eine Zeichenfolge im String durch eine neue Zeichenfolge ersetzt und in einer neuen Variable abgespeichert werden:
```julia; term=true
s = "banana"
s_1 = replace(s,"nana"=>"nane")
s_2 = replace(s,'a'=>'u')
@show s
```
Das erste Argument der Funktion ist der zu verändernde String.
Das zweite Argument setzt sich zusammen aus dem String oder Character der ersetzt werden soll, einem Pfeil bestehend aus `=` und `>`, sowie dem String oder Character der eingefügt werden soll.
Die ursprüngliche Variable `s` bleibt dabei unverändert.

Es gibt mehrere Möglichkeiten Strings zusammenzusetzen.
Eine davon ist die Verwendung des `*`-Operators.
```julia; term=true
s = "Zack"
s*", "*s*", "*s*"!"
```
Eine weitere Möglichkeit bietet die Funktion `string()`:
```julia; term=true
string(s,", ",s,", ",s,"!")
```
Diese Varianten werden allerdings schnell unübersichtlich.
In diesem Fall bietet sich die String Interpolation als übersichtlichere Möglichkeit an:
```julia; term=true
"$(s), $(s), $(s)!"
```

Der `^`-Operator wiederholt einen String beliebig oft:
```julia; term=true
"stop"^5
"$(s), "^2*"$(s)!"
```

Weitere interessante Funktionen sind im Online-Buch [Think Julia](https://benlauwens.github.io/ThinkJulia.jl/latest/book.html#chap08) und im entsprechenden Bereich der [Julia-Dokumentation](https://pkg.julialang.org/docs/julia/THl1k/1.1.1/manual/strings.html).

### Symbols

Symbols?

## Zahlen
In Julia sind verschiedene Datentypen für Zahlen definiert.
Im Beispiel oben ist der ganzzahlige Wert `2` vom Typ `Int64` und `42.0` vom Typ `Float64`.
Diese beiden Datentypen werden für Zahlen am häufigsten verwendet.
Daneben bietet Julia allerdings noch die Typen `Complex` und `Rational` für komplexe und rationale Zahlen.
```julia; term=true
typeof(1.3+4im)
typeof(23//4)
```
Für Zahlen vom Typ `Int` und `Float` gibt es verschiedene Typen, die sich nach ihrer Anzahl an Bits im Speicher unterscheiden.
Die Zahl am Ende des Typs gibt genau diesen Wert an.
Neben den Typen `Int64` und `Float64` gibt es daher noch `Int8`, `Int16`, `Int32` und `Int128`, sowie `Float16` und `Float32`.
Diese Zahlentypen benötigen zwar weniger Speicher (ausgenommen `Int128`), es ist aber zu beachten, dass diese Integer-Typen nur für Zahlen bis zu einer gewissen Größe funktionieren und die beiden Float-Typen weniger Kommastellen bereitstellen als `Float64`.
Eine Übersicht dazu bietet die Tabellen im Kapitel [Integers and Floating-Point Numbers](https://pkg.julialang.org/docs/julia/THl1k/1.1.1/manual/integers-and-floating-point-numbers.html) in der Julia Dokumentation. 

Mithilfe der Operatoren `+`, `-`, `*` und `/` können Zahlen addiert, subtrahiert, multipliziert und dividiert werden:
```julia; term=true
17 + 2
13.0 - 4
1.0 * 19.0
38 / 2
```
Während der Datentyp des Ergebnisses einer Addition, Subtraktion und Multiplikation abhängig vom Datentyp der Eingangswerte ist, ergibt die Division zweier ganzzahliger Werte immer eine Float-Zahl.
Potenzen werden mit `^` eingegeben:
```julia; term=true
2^3
```

Die Reihenfolge der Operationen folgt dabei den üblichen mathematischen Regeln:
1. Klammern,
2. Potenzen,
3. Multiplikation und Division und
4. Addition und Subtraktion.
Gleichrangige Operationen führt Julia immer der Reihe nach von links nach rechts aus.
Klammern bieten die Möglichkeit, den Code zu strukturieren und besser lesbar zu machen, auch wenn diese nicht immer notwendig sind:
```julia; term=true
d = 5;
A = d^2*pi/4
A = (d^2 * pi) / 4
```

Die Funktionen `string()` und `parse()` konvertieren Zahlen in Strings und umgekehrt:
```julia; term=true
string(19.0)
parse(Int64,"17")
parse(Float64,"1.2345")
```

`float()` und `Int()` wandeln beliebige Zahlen in Float-Zahlen bzw. in ganzzahlige Werte um.
Bei Verwendung von `Int()` muss gewährleistet sein, dass die übergebene Zahl tatsächlich ganzzahlig ist, sonst meldet Julia einen `InexactError`.
```julia; term=true
float(3)
float(4//3)
Int(2.3)
Int(2.0)
Int(4//4)
```

Zum Runden von Zahlen eignen sich die Funktionen `round()`, `floor()` und `ceil()`.
```julia; term=true
round(1.47)
floor(1.47)
ceil(1.47)
```
Während erstere zur nächstliegenden ganzen Zahl rundet, ermöglichen die anderen beiden Funktionen ab- und aufrunden von Zahlen.
Die Anzahl der zu rundenden Stellen kann über die zusätzlichen Argumente `digits` und `sigdigits` festgelegt werden.
```julia; term=true
round(345.123; digits=2)
round(345.123; sigdigits=2)
```
Das Keyword `digits` definiert dabei die Anzahl der Nachkommastellen, `sigdigits` legt die Anzahl der signifikanten Stellen fest.
Einfacher gesagt: `digits` beginnt ab dem Komma zu zählen, während `sigdigits` bereits ab der ersten Stelle der Zahl zählt.

Zwei weitere interessante Operatoren sind die ganzzahlige Division `÷` (*floor division*) und der Modulus-Operator `%`.
```julia; term=true
7÷3
7%3
```
`÷` führt eine Division durch und rundet das Ergebnis auf die nächste ganze Zahl ab.
Der Modulus-Operator gibt den Rest einer Division aus.
Damit kann zum Beispiel leicht überprüft werden, ob eine Zahl durch eine andere Zahl teilbar ist.

Alle Typen in Julia sind in einer Art Hierarchie strukturiert.
Beispielsweise ist `Integer` ein Subtyp von `Real` und Real wiederum ein Subtyp von `Number`.
Dabei hat er Datentyp `Real` neben `Integer` noch weitere Subtypen.
Mehr dazu unter Multiple Dispatch.
## Booleans
Eine Zahl vom Typ *Bool* kann entweder den Wert `true` oder `false` annehmen.
Verschiedene Operationen in Julia geben eine Zahl vom Typ `Bool` zurück, wie zum Beispiel das Vergleichen zweier Zahlen:
```julia; term=true
x = 13
y = 17.0
x == y
x != y
x ≠ y # \ne TAB
x > y
x < y
x >= y
x ≥ y # \ge TAB
x <= y
x ≤ y # \le TAB
```

Mit den Operatoren `>` und `<` können auch zwei Wörter auf ihre alphabetische Reihenfolge überprüft werden:
```julia; term=true
"apple" > "banana"
"apple" < "banana"
"apple" > "Banana"
```
Dabei ist zu beachten, dass Großbuchstaben immer vor Kleinbuchstaben eingeordnet werden.

Alle Ausdrücke die eine Zahl vom Typ `Bool` zurückgeben können mit den logischen Operatoren `&&` (*and*), `||` (*or*) und `!` (*not*) kombiniert werden.
```julia; term=true
s = "melon";
s > "banana" && length(s) == 6
s > "banana" || length(s) == 6
```
Bei `&&` müssen beide Ausdrücke vor und nach dem Operator `true` ergeben, damit der gesamte Ausdruck `true` ist.
Damit der Ausdruck mit `||` erfüllt ist und `true` ergibt, muss lediglich einer der beiden Ausdrücke erfüllt sein.

Operator precedence
!
## Funktionen mit Zahlen
zero (additive identity), one (multiplicative identity), rand ...

