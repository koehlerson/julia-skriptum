---
options:
      out_width : 50 %
      fig_height : 2.2
      fig_width : 4.3
      fig_env : center
      fig_pos : ""
---

# Statistik

In Julia sind einige grundlegende Statistikfunktionen im `Statistics`-Paket enthalten.
Das Paket kann wie alle anderen Pakete mit `using` geladen werden.

```julia
using Statistics
```

Um die folgenden Beispiele anschaulich zu machen, werden Testdaten benötigt.
Diese werden aus der Iris-Datenbank[^1] entnommen.
Die Datenbank enthält Abmessungen und Spezies von 150 Iris Blumen und ist in `RDatasets.jl` enthalten.

[^1]: <https://en.wikipedia.org/wiki/Iris_flower_data_set>

```julia; results="hidden"
using RDatasets
iris = dataset("datasets", "iris")
```

Die Variable `iris` ist ein `DataFrame` mit fünf Spalten:

```julia
names(iris)
```

Die ersten vier Spalten enthalten `Float`-Zahlen mit Längenangaben und die letzte Spalte enthält einen `String` mit der Spezies der Pflanze.

Häufig benötigte Funktionen für statistische Berechnungen sind
- Mittelwert `mean()`,
- Standardabweichung `std()`,
- Median `median()` und
- Varianz `var()`.

Für die Spalte `SepalLength` können mit diesen Funktionen die folgenden Werte ermittelt werden:
```julia; term=true
mean(iris.SepalLength)
std(iris.SepalLength)
median(iris.SepalLength)
var(iris.SepalLength)
```

Neben diesen Funktionen gibt es noch weitere: zur Berechnung der Kovarianz (`cov()`), des Pearson-Korrelationskoeffizient (`cor()`) und der Quantile (`quantile()`).
Nähere Details dazu sind in der Dokumentation unter [Standard Library/Statistics](https://docs.julialang.org/en/v1/stdlib/Statistics) zu finden.

Oft ist es erforderlich Annahmen zu Wahrscheinlichkeitsverteilungen gewisser Daten zu treffen.
In `Distributions.jl` sind dafür die notwendigen Funktionen für eine Reihe von verschiedenen Verteilungen definiert.
Zusätzlich enthält das Paket Funktionen zum \enquote{Fitting} und \enquote{Sampling} von Daten und kann wie folgt geladen werden:

```julia
using Distributions
```

Um die Daten in den folgenden Beispielen zu visualisieren wird ebenfalls `Plots.jl` geladen:

```julia
using Plots
```

Beim \enquote{Sampling} geht es darum Zufallszahlen aus einer gewissen Verteilung zu ziehen.
Ein Zufallszahlengenerator, mit einer zugrundeliegenden Normalverteilung (Mittelwert 2.5 und Standardabweichung 0.5), kann folgendermaßen erzeugt werden:

```julia
d = Normal(2.5,0.5)
```

Mit `rand` generiert man nun z.B. 1000 Zufallszahlen, die dieser Verteilung entsprechen.

```julia
data = rand(d,1000)
histogram(data)
```

Weitere Verteilungen sind in der [Dokumentation](https://juliastats.github.io/Distributions.jl/stable/)[^2] gelistet.

[^2]: <https://juliastats.github.io/Distributions.jl/stable/>

Neben dem \enquote{Sampling} von Daten ist auch das \enquote{Fitting}, also ermitteln der Parameter für Verteilungsfunktionen, möglich.
Dafür wird die Funktion `fit` verwendet.
In einem ersten Schritt werden für die Spalte `SepalLength` aus den Daten in `iris` die Parameter für eine Normalverteilung ermittelt:
```julia
d = fit(Normal, iris.SepalLength)
```

Der Vergleich mit den zuvor ermittelten Werten zeigt eine ungefähre Übereinstimmung.
Um die Qualität des \enquote{Fittings} zu beurteilen, werden ein normalisiertes Histogramm der Daten und die Dichtefunktion der ermittelten Verteilung dargestellt.
```julia
plt = histogram(iris.SepalLength,normed=true)
x = 3:0.1:9
# Berechnen der Werte der Dichtefunktion für d an den Stellen in x
y = pdf.(d,x)
plot!(plt,x,y)
```

Offensichtlich passt die Dichtefunktion gut zu den Messwerten.
Die angepasste Normalverteilung kann jetzt wie zuvor für das Generieren von Zufallswerten verwendet werden.
