---
options:
      out_width : 70 %
      fig_env : center
      fig_pos : ""
---

# Statistik

In Julia sind einige grundlegende Statistikfunktionen im `Statistics` Paket enthalten.
Das Paket kann wie alle anderen Pakete mit `using` geladen werden.

```julia
using Statistics
```

Für die folgenden Beispiele wird die Iris-Datenbank[^1] geladen.
Sie enthält eine Sammlung von Abmessungen und Spezies von 150 Iris Blumen und ist im Paket `RDatasets` enthalten.

```julia; results="hidden"
using RDatasets
iris = dataset("datasets", "iris")
```

`iris` ist ein `DataFrame` mit den Spalten:

```julia
names(iris)
```

Eine Zeile sieht z.B. so aus:

```julia
iris[3,:]
```

Häufig benötigte Funktionen in für Statistische Berechnungen sind
- Mittelwert `mean()`,
- Standardabweichung `std()`,
- Median `median()` und
- Varianz `var()`

Für die Spalte `SepalLength` können die Werte folgendermaßen ermittelt werden:
```julia; term=true
mean(iris.SepalLength)
std(iris.SepalLength)
median(iris.SepalLength)
var(iris.SepalLength)
```

Neben diesen Funktionen gibt es noch Funktion zur Berechnung der Kovarianz (`cov`) und des Pearson-Korrelationskoeffizient (`cor`).
Details dazu in der Dokumentation unter [Standard Library/Statistics](https://docs.julialang.org/en/v1/stdlib/Statistics).

In vielen Fällen ist es notwendig Verteilungsfunktionen zu verwenden.
In Distributions.jl sind dafür die bestimmenden Funktionen für eine Reihe von verschiedenen Verteilungen definiert.
Zusätzlich enthält das Paket Funktionen zum "fitting" und "sampling" von Daten.
Das Paket kann wie folgt geladen werden:

```julia
using Distributions
```

Zusätzlich wird Plots.jl geladen, um die Daten zu visualisieren.

```julia
using Plots
```

Es ist beispielsweise Möglich einer Zufallszahl eine gewisse Verteilung (Normalverteilung mit Mittelwert 2.5 und Standardabweichung 0.5) zugrunde zu legen:

```julia
d1 = Normal(2.5,0.5)
d2 = Gumbel(2.5)
```

Mit `rand` können nun z.B. 1000 Zufallszahlen, die dieser Verteilung entsprechen, generiert werden:

```julia
data1 = rand(d1,1000)
data2 = rand(d2,1000)
histogram([data1 data2],layout=grid(2,1),label=["Normal", "Gumbel"])
```

Weitere Funktionen können der [Dokumentation](https://juliastats.github.io/Distributions.jl/stable/)[^2]  entnommen werden.

Neben dem "sampling" von Daten ist auch das "Fitting" von Verteilungsfunktionen möglich.

```julia
d = fit(Normal, iris.SepalLength)
plt = histogram(iris.SepalLength,normed=true)
x = collect(minimum(iris.SepalLength):0.01:maximum(iris.SepalLength))
y = pdf(d,x)
plot!(plt,x,y)
```

[^1]: [https://en.wikipedia.org/wiki/Iris_flower_data_set](https://en.wikipedia.org/wiki/Iris_flower_data_set)
[^2]: [https://juliastats.github.io/Distributions.jl/stable/](https://juliastats.github.io/Distributions.jl/stable/)
