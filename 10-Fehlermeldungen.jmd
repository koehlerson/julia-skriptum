# Exceptions

Ein Programm zu schreiben, ist eine komplexe Aufgabe, bei der es häufig dazu kommt, dass das Programm nicht das macht, was es geplanterweise tun soll und mit einem Fehler abbricht.

Grob können diese Fehler in *Syntax Errors*, *Logical Errors* und *Runtime Errors* eingeteilt werden.

## Syntax Errors

Ein *Syntax Error* tritt in den meisten Fällen bereits vor der eigentlichen Ausführung des Programms auf und wird durch einen falsch geschriebenen Befehl verursacht.
Dies betrifft hauptsächlich Keywords der Programmiersprache (`if`, `else`, `function`, ...) und ungültige Variablennamen.

```julia;term=true
42number = "meaning of life"
```

Nach Auftreten des Fehlers wird das Programm unterbrochen. Die Fehlermeldung wird mit `Error:` eingeleitet und enthält den Hinweis `syntax`.
Üblicherweise gibt Julia Hinweise darauf, was das Problem verursacht hat, es lohnt sich also immer, Fehlermeldungen zu lesen.

## Logical Errors

Bei *Logical Errors* handelt es sich um Fehler in der Programmlogik (z.B. eine falsche Formel oder falsche Annahme).

In der folgenden Funktion ist ein logischer Fehler. Eigentlich sollte die Funktion $x^n$ berechnen, gibt aber $x^{n+1}$ zurück.

```julia; results="hidden"
function pow(x::Number,n::Int)
    x_pow = x
    for i in 1:n
        x_pow *= x
    end
    return x_pow
end
```
```julia; term=true
pow(3,2)  # Sollte 9 ergeben
```

Das Problem mit logischen Fehler ist, dass das Programm ohne Fehlermeldung läuft, dass Ergebnis aber falsch ist.

## Runtime Errors

*Runtime Errors* sind Fehler, die während der Laufzeit des Programms auftreten.
In Julia gibt es eine Vielzahl solcher Fehlern, die immer dann ausgelöst werden, wenn etwas Unvorhergesehenes passiert.
In weiterer Folge werden nur die häufigsten behandelt, eine vollständige Liste befindet sich in der Dokumentation unter [Manual/Control Flow/Exception Handling](https://docs.julialang.org/en/v1/manual/control-flow/#Exception-Handling-1).

`BoundsError`

Zugriff auf einen nicht besetzten Index in einem Array.
```julia
a = [1,2,3]
a[4]
```

`DomainError`

Das Argument ist nicht innerhalb des (mathematisch) definierten Bereichs der Funktion.
```julia
sqrt(-1)
```

`InexactError`

Eine Operation kann nicht exakt ausgeführt werden.
```julia
convert(Int,12.1)
```
Um in diesem Fall von der `Float64`-Zahl `12.1` zur `Int`-Zahl `12` zu gelangen, muss vorher gerundet werden.

`MethodError`

Es existiert keine Methode, die den angegebenen Argumenten entspricht
```julia
abs("Ein String")
```

`UndefVarError`

Die Variable ist nicht definiert.
```julia
nicht_definiert
```

### Stacktrace

Der sogenannte *Stacktrace* gibt Auskunft darüber, welche Funktionsaufrufe zu dem Fehler geführt haben.
Er wird immer am Ende der Fehlermeldung ausgegeben.

Im folgenden Beispiel wird nach mehreren verschachtelten Aufrufen auf einen Index außerhalb eines Arrays zugegriffen.

```julia; results="hidden"
function level03(x)
    # Zugriff ist ok
    x[1]
    # Zugriff ist nicht ok
    x[length(x)+1]
end
level02(x) = level03(x)
level01(x) = level02(x)

level01([1,2,3])
```

Der *Stacktrace* zu diesem Aufruf sieht wie folgt aus:

```julia; hold=true; echo=false
@noinline function level03(x)
    # Zugriff ist ok
    x[1]
    # Zugriff ist nicht ok
    x[length(x)+1]
end
@noinline level02(x) = level03(x)
function level01(x)
    try
        level02(x)
    catch err
        println("Stacktrace: ")
        foreach(enumerate(stacktrace(catch_backtrace())[1:4])) do (i,lin)
            println(" [$i] $lin")
        end
    end
    nothing
end
level01([1,2,3])
```

Bei `[1]` wird der auslösende Funktionsaufruf angezeigt, der Zugriff auf einen Arrayindex. Jede weitere Zeile entspricht dem nächsthöheren Aufruf. 
Wird der *Stacktrace* von `[4]` nach `[2]` gelesen, ist erkennbar, dass `level01` `level02` aufruft und `level02` `level03`.

Der *Stacktrace* ist sehr hilfreich, wenn es darum geht zu reproduzieren, warum und wo ein Fehler aufgetreten ist.
