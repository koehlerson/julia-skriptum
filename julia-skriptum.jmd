---
title : Programmieren im Bauingenieurwesen
subtitle: Einführung und Grundlagen
author : Sebastian Pech, Raphael Suda
date: 26. Julia 2019
---

# Intro
Warum, vgl. Python, Matlab
# Installation
# Interaktion
## REPL
- Repl modes
  - Help
  - Shell
  - Pkg
## Juno
## Jupyter
# Hilfe

- Hilfe Repl-Mode
- [Offizielle Dokumentation](https://docs.julialang.org/)
- [Stack Overflow](https://stackoverflow.com/questions/tagged/julia)
- [Discourse](https://discourse.julialang.org/)
- [Github](https://github.com/)


# Variablen

```{julia; term=true}
a = 1
b = 2
summe = a+b
```

Unicode
```{julia; term=true}
α = 3.1
4*α
```

## Welche Variablennamen sind erlaubt?

# Datentypen
## Boolean
## Zahlen
Int, Float, Complex, Rational
Konvertieren und runden
## Char und String
find replace
## String zu Zahl und Zahl zu String
## Funktionen mit Zahlen
zero, one, rand ...

# Arrays, Vektoren, Matrizen, Tensoren, Tuple, Set
## Arrays
### Erzeugen
### Verändern
### Bezug zu Strings
## Tuple
### Bezug zu Arrays
## Sortieren, Filtern, Finden, Map, reduce
## Sets
### Set operationen

# Funktionen
https://docs.julialang.org/en/v1/manual/functions/
kw argumente, args..., return, dokumentation

# Lineare Algebra

```{julia}
using LinearAlgebra
```

```math
   x - y = 22\;\text{und}\;2x + 3y = 11
```

```math
   \mathbf{A}\mathbf{b}=\mathbf{c}
```

```{julia; term=true}
A = [1 -1
     2  3]
det(A)
c = [22, 11]
A_inv = inv(A)
b = A_inv*c
b ≈ A\c
A*b ≈ c
```

## Mathematische Funktionen und Symbole

Identity (lazy), exp, sin, cos, pi

## Aufgabe: Löse das Gleichungssystem 

```math
   x - y + z = 22\;\text{und}\;2x + 3y = 11\;\text{und}\;10x-y/2+5z=0
```

```{julia;}
A = [1 -1 1
     2  3 0
     10 -0.5 5]
@show det(A)
c = [22, 11, 0]
@show A\c
```

## Aufgabe: Verwende die Funktionen `eigvals` und `eigvecs` 

um die obige Matrix zu Zerlegen und kontrolliere das Ergebnis für den ersten Eigenvektor und 
in dem die Matrix durch die Eigenvektoren und Eigenwerte wieder hergestellt wird.

```{julia;}
A = [1 -1 1
     2  3 0
     10 -0.5 5]
λ = eigvals(A)
ϕ = eigvecs(A)
@show A*ϕ[:,1] ≈ λ[1]*ϕ[:,1]
@show ϕ*Diagonal(λ)*inv(ϕ) ≈ A
```

# Controlflow

## if, elseif, else

### Aufgabe: Schreibe ein Skript das eine Ziffer einliest und diese in Worten darstellt.
```
 readline()
```

## Schleifen for, while
### Performance Optimierung Julia
### Aufgabe: Berechne PI mittels Monte-Carlo-Simulation
### Aufgabe: Integriere eine Beliebige Funktion nummerisch
### Aufgabe: Wie hoch ist die Wahrscheinlichkeit
... mit einem idealen Würfel (1-6) 3 x hintereinander 4 zu würfeln

```{julia;}
throw() = rand(1:6)
@time P_est = sum([all(i->i==4,(throw() for _ in 1:3)) for __ in 1:100000000])/100000000
P_corr = 1/6^3
@show P_est, P_corr
```

... mit einem idealen Würfel (1-6) bei 3 Würfen mindestens 1nen 4er zu würfeln

```{julia;}
@time P_est = sum([any(i->i==4,(throw() for _ in 1:3)) for __ in 1:100000000])/100000000
P_corr = (1/6+5/6*1/6+5/6*5/6*1/6)
@show P_est, P_corr
```

# Methoden

Multiple dispatch

# Debugging

# Spezielle Datentypen
Date und Datetime
Uniful, Measurements, usw ...

# FileIO
filesystem zeug (readdir, rm, ...)
text dateien einlesen

Data serialization: CSV, Excel, FortranFiles, MAT, JLD, HDF5, JSON, BSON, XML

# Plotting

# Symbolische Berechnungen
SymPy, ...

# Regressionsaufgaben, Interpolation
Polynomial, Spline, ...
Interpolations

# Statistik
Buildins und Distributions und Dataframes

# Ausblick weitere Pakete

