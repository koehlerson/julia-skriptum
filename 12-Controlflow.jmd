# Controlflow

## if, elseif, else

### Aufgabe: Schreibe ein Skript das eine Ziffer einliest und diese in Worten darstellt.
```
 readline()
```

## Schleifen for, while
### Performance Optimierung Julia
#### Macros @time, Benchmarktools 
### Aufgabe: Berechne PI mittels Monte-Carlo-Simulation
### Aufgabe: Integriere eine Beliebige Funktion nummerisch
Simpson und / oder trapezoid

Simpson:
```julia
function ∫(f::Function, a::Number, b::Number, n::Number)
    n % 2 == 0 || error("`n` must be even")
    h = (b-a)/n
    s = f(a) + f(b)
    s += 4*mapreduce(f,+,a .+ (1:2:n) * h)
    s += 2*mapreduce(f,+,a .+ (2:2:n-1) * h)
    return h/3 * s
end
```

### Aufgabe: Wie hoch ist die Wahrscheinlichkeit
... mit einem idealen Würfel (1-6) 3 x hintereinander 4 zu würfeln

```{julia;}
throw() = rand(1:6)
@time P_est = sum([all(i->i==4,(throw() for _ in 1:3)) for __ in 1:100000000])/100000000
P_corr = 1/6^3
@show P_est, P_corr
```

... mit einem idealen Würfel (1-6) bei 3 Würfen mindestens 1nen 4er zu würfeln

```{julia;}
@time P_est = sum([any(i->i==4,(throw() for _ in 1:3)) for __ in 1:100000000])/100000000
P_corr = (1/6+5/6*1/6+5/6*5/6*1/6)
@show P_est, P_corr
```
