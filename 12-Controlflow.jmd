# Kontrollstruktur

Der Code in den bisher behandelten Beispiele setzte sich aus einer sich nicht verzweigenden Verkettung von Befehlen zusammen.
Für sehr rudimentäre Programme mag das ausreichen, in den meisten Fällen werden aber Verzweigungen in Form von `if`-Bedingungen und Schleifen benötigt.

## Verzweigungen

Dieses Konstrukt erlaubt es, abhängig von einer *Bedingung* (die ausgewertet vom Typ `Bool` sein muss) einen Codeteil auszuführen oder zu überspringen.
Die einfachste Form ist das `if`-Statement:

```julia;
x = -1
if x < 0
    println("x ist negativ.")
end
```

In diesem Beispiel ist die *Bedingung* `x > 0`. Wie bereits im Abschnitt zu den Datentypen gezeigt, ergibt die Auswertung dieses Ausdrucks einen Wert vom Typ `Bool`:

```julia; term=true
x < 0
typeof(x < 0)
```

Die zweite Form ist die Kombination aus `if` und `else`. `else` bezeichnet den Zweig der ausgeführt wird, falls die Bedingung nicht erfüllt ist.

```julia;
x = 1
if x < 0
    println("x ist negativ.")
else
    println("x ist positiv.")
end
```

Da `x < 0` ausgewertet `j x < 0` ergibt, wird der `if`-Zweig übersprungen und der `else`-Zweig ausgeführt.

Die dritte Form ist im Grunde eine vereinfachte Schreibweise für Kombinationen von Form eins und Form zwei.
Der folgende Code 

```julia;
x = 9
if x < 0
    println("x ist negativ.")
else
    if x <= 10 
        println("x ist eine Zahl von 0 bis 10.")
    else
        println("x ist größer als 10.")
    end
end
```

kann einfacher und übersichtlicher durch `elseif` geschrieben werden.

```julia;
x = 9
if x < 0
    println("x ist negativ.")
elseif x <= 10 
    println("x ist eine Zahl von 0 bis 10.")
else
    println("x ist größer als 10.")
end
```

## Schleifen

Computer sind besonders gut geeignet um repetitive Aufgaben zu lösen.
Solche Aufgaben werden durch Schleifen definiert.
Julia biete zwei Arten von Schleifen: `for` und `while`-Schleife.

Die `while`-Schleife hat eine gewisse Ähnlichkeit zur `if`-Bedingung.
Eine Aufgabe in einer solchen Schleife wir solange ausgeführt, solange eine *Bedingung* erfüllt ist.

Im folgenden Beispiel wird jede Zahl von 0 bis 10 ausgegeben (`global i` kann für das Erste ignoriert werden)

```julia; hold=true
function zähle_bis(n)
    i = 1
    while i <= n
        println("Bin bei Zahl $i")
        i += 1
    end
end
zähle_bis(10)
```

Der Code wird wird folgendermaßen durchschritten:
1. Initialisiere `i` mit `1`
2. Falls die Bedingung `i <= 10` erfüllt ist gehe zu (3), ansonsten gehe zu (6)
3. Ausgabe von `"Bin bei Zahl $i"`
4. Erhöhe `i` um `1`
5. Gehe zurück zu (2)
6. Ende

Dieser Ablauf wird Schleife genannt, weil (5) wieder zurück zu (2) springt.
Bei diesem Code ist Vorsicht geboten: Vergisst man die Zeile `i += 1`, wird die Bedingung `i <= 10` nie erfüllt.
Das bedeutet die Schleife läuft endlos (Endlosschleife). 
In der REPL oder in Juno kann eine Endlosschleife durch die Tastenkombination `Ctrl-C` abgebrochen werden.

Beim obigen Beispiel handelt es sich um eine Zählschleife.
Dieses Konstrukt ist so häufig, dass es einen eigenen Schleifentyp dafür gibt: Die `for`-Schleife.
Der Code in der `for`-Schleife wird für jedes Element in einer ihr übergebenen Menge ausgeführt.
Das vorherige Beispiel vereinfacht sich daher zu:

```julia
function zähle_bis(n)
    for i in 1:n
        println("Bin bei Zahl $i")
    end
end
zähle_bis(10)
```

Anstelle von `1:n` kann jede Art von Liste angegeben werden.

```julia
for buchstabe in ["A", "B", "C", "D"]
    println("Bin bei Buchstabe $buchstabe")
end
```

### break und continue

Eine Schleifeniteration kann jederzeit durch den Aufruf von `break` abgebrochen und den Aufruf von `continue` übersprungen werden.

Im folgenden Beispiel werden von einem `String` nur die Vokale gesammelt. Falls ein `!` gefunden wird, werden die gesammelten Vokale ausgegeben und die Schleife beendet.

```julia
function sammle_vokale(text)
    vokale_sammlung = ""
    for buchstabe in text
        if buchstabe == '!'
            println(vokale_sammlung)
            break
        end
        if !(buchstabe in ('a','e','i','o','u'))
            continue
        end
        vokale_sammlung *= buchstabe
    end
end
sammle_vokale("Finde die Vokale in diesem Satz. Gehe aber nicht weiter als bis zum !. Das sollst du nicht mehr ansehen")
```

`break` wird oft auch in Kombination mit `while`-Schleifen verwendet die endlos laufen. 
Wenn Beispielsweise in der Schleife auf eine Dateneingabe gewartet wird, oder die Abbruchbedingung sehr komplex ist.
In diesem Fall kann eine Endlosschleife absichtlich durch Verwenden der Bedingung `true` konstruiert werden.

### Performance Optimierung Julia

Bei den folgenden Aufgaben wird es wichtig sein, einen möglichst effizienten Code zu schreiben.
Optimierung ist ein sehr komplexes Thema, es gibt in Julia aber ein paar grundlegende Punkte die beachtet werden sollten.

Um eine Auskunft über die Laufzeit eines Codes zu erhalten (Benchmark-Test) biete Julia das `@time`-Macro.

Die folgende Funktion berechnet `n`-mal die inverse einer Matrix `A` und ist nur als Beispielfunktion für die Verwendung von `@time` gedacht.

```julia
function time_dummy(n::Int)
    A = [3 1 0
         0 1 0
         3 3 3]
    for i in 1:n
        inv(A)
    end
end
```

```julia; term=true
@time time_dummy(100000)
@time time_dummy(100000)
@time time_dummy(100000)
```

Das `@time`-Macro gibt die erforderliche Zeit und Angaben über das Speichermanagement aus.
Der erste Aufruf der neu geschriebenen Funktion `time_dummy` braucht wesentlich länger als die nächsten beiden.
Das liegt daran, dass Julia beim ersten Aufruf die Funktion für die angegeben Argumente kompiliert.

Dieser Vorgang ist sehr wichtig um eine performante Ausführung zu ermöglichen und wird stark durch die so genannte *Typenstabilität* beeinflusst.

#### Typenstabilität

Stabilität bedeutet hier, dass sich der Datentyp einer Variable mit der Laufzeit nicht ändert.
Eine mögliche Fehlerquelle dafür ist im folgendem Beispiel zu sehen[^1].

[^1]: <http://www.johnmyleswhite.com/notebook/2013/12/06/writing-type-stable-code-in-julia/>

```julia
function summe_sin_A(n::Int)
    ∑ = 0
    for i in 1:n
        ∑ += sin(n)
    end
    return ∑
end

function summe_sin_B(n::Int)
    ∑ = 0.0
    for i in 1:n
        ∑ += sin(n)
    end
    return ∑
end
```

Der einzige Unterschied der Funktionen A und B befindet sich in der ersten Zeile bei der Definition von `\sum`. Im Fall von A wird mit `Int` im Fall von B mit `Float64` initialisiert.

Um die Funktionen zu Benchmarken werden beide in Schleifen ausgeführt.

```julia; results="hidden"
function benchmark_summe_A()
    for _ in 1:100
        summe_sin_A(100000)
    end
end

function benchmark_summe_B()
    for _ in 1:100
        summe_sin_B(100000)
    end
end
```

Die Laufzeit der beiden Fälle ergibt sich zu:

```julia;term=true
benchmark_summe_A(); benchmark_summe_B(); # Erster Aufruf zum kompilieren
@time benchmark_summe_A()
@time benchmark_summe_B()
```

Der große Unterschied zwischen den beiden Funktionen resultiert aus dem Rückgabewert der Funktion `sin`:
```julia; term=true
typeof(sin(3))
```

`sin` gibt `Float64` zurück. Das bedeutet bei Fall A muss `\sum` von `Int` in `Float64` konvertiert werden, was immens viel Zeit benötigt.

Ein weiterer häufig gemachter Fehler tritt bei Funktionen auf, die für gleiche Datentypen der Argumente verschiedene Datentypen der Ergebnisse zurückgeben.
Beispielsweise gibt die folgende Definition der Rampen-Funktion inkonsistente Datentypen zurück:

```julia; results="hidden"
function ramp(x)
    if x < 0
        return 0
    else
        return x
    end
end
```

```julia; term=true
ramp(3.0)
ramp(-3.0)
ramp(3)
ramp(-3)
```

Eine Möglichkeit wäre die Funktion für die Typen `Float64` und `Int` zu spezialisieren oder besser die `zero` Funktion zu verwenden:

```julia; results="hidden"
function ramp(x)
    if x < 0
        return zero(x)
    else
        return x
    end
end
```

```julia; term=true
ramp(3.0)
ramp(-3.0)
ramp(3)
ramp(-3)
```

#### Vermeiden von globalen Variablen

Eine globale Variable ist beispielsweise `x` im folgenden Code:

```julia

x = "Ich bin global!"

function test_global()
    println(x)
end
test_global()
```

`x` ist innerhalb der Funktion `test_global` verwendbar obwohl die Variable außerhalb definiert wurde.
Der Nachteil von globalen Variablen ist, das Julia die Funktionen die die Variablen verwenden wieder nicht exakt für den Typ
der globalen Variable spezialisieren kann, da die Variable veränderbar ist:

```julia
x = 100
test_global()
```

`test_global` gibt jetzt den neuen Wert von `x` aus. In diesem Fall hat sich nicht nur der Wert, sonder auch der Typ von `String` zu `Int` geändert.

In manchen Fällen ist es sinnvoll globale Variablen zu verwenden, dann sollten diese mit dem Keyword `const` als Konstanten definiert werden (Konstanten werden üblicherweise in Blockbuchstaben geschrieben).

```julia
const GRAV_BESCHL = 9.81 # m/s²
function Kraft(masse) # masse in kg
    masse*GRAV_BESCHL
end
Kraft(8.0)
```

Eine Konstante darf sich nicht ändern, damit ist der Code wieder Typenstabil.

```julia
GRAV_BESCHL = "Neuer Wert"
```

## Aufgaben

### Gerade oder Ungerade

Schreibe ein Funktion die \enquote{Gerade} oder \enquote{Ungerade} für eine Zahl mit `println` ausgibt.

```julia; results="hidden"; echo=false 
function gerade_ungerade(x::Int)
    if x % 2 == 0
        println("Gerade")
    else
        println("Ungerade")
    end
end
```

Beispiele:
```julia; term=true
gerade_ungerade(11)
gerade_ungerade(218)
```

### Skript Flächeninhalt

Es soll ein **Skript** zur Berechnung von Flächeninhalt und Umfang eines Kreises erstellt werden das Benutzern erlaubt mehrmals Eingaben zu machen.
Die Ausgabewerte sollen auf zwei Stellen gerundet werden.
Das Skript soll erst abgebrochen werden, wenn eine leere Eingabe gemacht wird, wird eine falsche Eingabe gemacht, muss \enquote{Falsche Eingabe} ausgegeben werden.

Die Ausgabe nach Ausführung des Skripts mit `julia kreis.jl` muss exakt mit dem folgenden Text übereinstimmen.

```bash
Radius eingeben: 3
A = 28.27
U = 18.85

Radius eingeben: abc
Falsche Eingabe

Radius eingeben: 1.2
A = 4.52
U = 7.54

Radius eingeben:
```

Für die Kontrolle mit dem Kontrollprogramm muss die allgemeine Form der Eingabe verwendet werden. 
Zusätzlich muss die Schleife für die wiederholte Ausführung über eine Funktion gestartet werden.
Die Funktion muss wie im folgenden Beispiel am Ende des Kontrollblocks stehen.
Wichtig für die Kontrolle ist, dass alle Ausgaben exakt mit dem Beispiel oben übereinstimmen.

```julia; eval=false
@Aufgabe "11.3.2" begin
    # ...
    # Platz für Zusatzfunktionen die eventuell verwendet werden
    # ...
    function run()
        # ...
        # Hauptfunktion die die Schleife beinhaltet
        # ...
        while
            # ...
        end
        # ...
    end
end
```

### Berechne π

Die Zahl `π` kann über eine so genannte Monte-Carlo-Simulation angenähert werden.
Dabei werden zufällig Punkte in einem Quadrat mit bekannter Seitenlänge platziert. 
Durch Einschreiben eines Kreise in das Quadrat und ermitteln der Anzahl an Punkten die im Kreis gelandet sind, kann die Fläche des Kreises relativ zur Fläche des Quadrates ermittelt werden.
`π` wird dann einfach über die Kreisflächenformel 

Schreibe eine Funktion die `π` mittels Monte-Carlo-Simulation approximiert.
Das einziges Argument der Funktion ist die Anzahl an zufällig ermittelten Punkte.
Um den Rechenaufwand zu reduzieren soll nur ein Vierteilkreis in einem Quadrat berücksichtigt werden.
Die ermittelte relative Fläche muss dann natürlich noch mit dem Faktor 4 vergrößert werden.

```julia; results="hidden"; echo=false
function π_mc(n::Int)
    inside = 0
    for _ in 1:n
        inside += rand()^2+rand()^2 <= 1.0
    end
    4*inside/n
end
```

Beispiele (mit steigender Anzahl von Punkten steigt auch die Genauigkeit):

```julia; term=true
π_mc(10)
π_mc(100)
π_mc(1_000_000)
π_mc(1_000_000_000)
```

### Numerisch Integrieren

Schreibe eine Funktion die das bestimmte Integral einer beliebigen 1d Funktion definiert durch x- und y-Werte berechnet.
Verwendet dazu die [Trapezregel](https://de.wikipedia.org/wiki/Trapezregel)[^2].

[^2]: <https://de.wikipedia.org/wiki/Trapezregel> 

```julia; results="hidden"; echo=false
function ∫(x,y)
    val = 0.0
    for i in 1:min(length(x),length(y))-1
        val += (x[i+1]-x[i])*(y[i]+y[i+1])/2
    end
    return val
end
```

Beispiele:
```julia; term=true
x = collect(0:0.0001:1);
∫(x,sin.(x.^2))
∫(x,cos.(x.^2))
∫(x,x)
x = collect(0:0.1:2π);
∫(x,sin.(x))
x = collect(0:0.01:2π);
∫(x,sin.(x))
x = collect(0:0.0001:2π);
∫(x,sin.(x))
```

### Wie hoch ist die Wahrscheinlichkeit

Die Monte-Carlo-Simulation kann auch dazu verwendet werden, um Wahrscheinlichkeiten zu approximieren.
Schreibe zwei Funktionen, welche die Wahrscheinlichkeit abschätzen, dass

1. mit einem idealen Würfel (1-6) 3 x hintereinander 4 gewürfelt wird und
2. mit einem idealen Würfel (1-6) bei 3 Würfen mindestens ein 4er gewürfelt wird.

Die Idee hinter der Simulation ist die Würfe mit einem Zufallszahlengenerator `rand(1:6)` zu simulieren und anschließen die positiven Ergebnisse in Relation zu den gesamten Würfen zu setzten.

Wie schon bei der Berechnung von `π` soll das einzige Argument bei den Funktionen die Anzahl an zufälligen Würfen sein.
Die Nummern für die Kontrolle sind die `11.3.5.1` und `11.3.5.2`.

```julia; results="hidden"; echo=false
throw() = rand(1:6)
function P_est_1(n)
    # P_corr = 1/6^3
    sum([all(i->i==4,(throw() for _ in 1:3)) for __ in 1:n])/n
end
function P_est_2(n)
    # P_corr = (1/6+5/6*1/6+5/6*5/6*1/6)
    sum([any(i->i==4,(throw() for _ in 1:3)) for __ in 1:n])/n
end
```

Beispiele:
```{julia;term=true}
P_est_1(10)
P_est_1(100)
P_est_1(1_000_000)
P_est_1(1_000_000_000)
P_est_2(10)
P_est_2(100)
P_est_2(1_000_000)
P_est_2(1_000_000_000)
```

Die exakten Ergebnisse sind:
```julia;term=true
1/6^3 # Fall 1
1/6+5/6*1/6+5/6*5/6*1/6 # Fall 
```

### Split

Im Abschnitt zu Strings wurde die Funktion `split` vorgestellt mit der Strings durch trennen bei einem Zeichen, in ein String-Array umgewandelt werden können.
Bei dieser Aufgabe soll die Funktion nachprogrammiert werden, natürlich ohne die Verwendung von `split`.
Das Trennzeichen muss vom Typ `char` sein und im Gegensatz zur `split` Funktion darf das resultierende Array keine leeren Strings `""` enthalten.
Achtung auch die Sonderfälle
- kein Trennzeichen
- Trennzeichen am Anfang
- Trennzeichen am Ende und
- mehrere Trennzeichen nacheinander
müssen behandelt werden.

```julia; results="hidden"; echo=false
function my_split(str,c::Char)
    push_no_empty!(a,b) = b != "" && push!(a,b)
    arr = String[]
    last_idx = 1
    for i in 1:length(str)
        if str[i] == c
            push_no_empty!(arr,str[last_idx:i-1])
            last_idx = i+1
        end
    end
    push_no_empty!(arr,str[last_idx:end])
    return arr
end
```

Beispiele:
```julia; term=true
my_split("Das ist ein String",' ')
my_split(".Das.ist.ein..String.",'.')
```

### Wurzelziehen

Nicht immer war Wurzelziehen so komfortabel wie heute.
Mit der Unterstützung eines Computers oder Taschenrechners gelingt das ganz einfach mit der Funktion `sqrt`.
In der Literatur findet man allerdings einige Verfahren mit welchen \enquote{händisches} Wurzelziehen möglich ist.
Eines dieser Verfahren wird [babylonisches Wurzelziehen](https://de.wikipedia.org/wiki/Heron-Verfahren)[^3] genannt.

Zur Berechnung der Quadratwurzel ``x`` von ``a`` wird zuerst eine Zahl ``x_0`` als Kandidat gewählt (z.B. ``x_0 = \frac{a}{2}``).
Anstelle von ``x=\sqrt{a}`` wird dann die Gleichung mit dem Kandidaten ``x_0 \cdot x_0 \stackrel{!}{=} a`` gelöst.
Wurde zufällt ``x_0 = x`` gewählt ist der Algorithmus beendet.
Wahrscheinlicher ist jedoch, dass ``x_0 \cdot x_0 \neq a``.
Je nach der Wahl von ``x_0`` ist ``x_0^2`` jetzt größer oder kleiner als ``a``, was auch bedeutet, dass ``x_0`` jetzt entsprechend größer oder kleiner als ``x`` ist.
Ändern wie die Gleichung für ``a`` zu ``x_0 \cdot b = a`` können wir durch Umformen eine zweite Zahl ``b`` ermitteln, für die gilt

```math
\begin{cases}
b < x,& \text{wenn } x_0 > x\\
b > x & \text{wenn } x_0 < x
\end{cases}
```

Damit wurde eine obere und eine untere Schranke für ``x`` bestimmt.
Damit ist jeder Wert innerhalb dieser Schranke eine bessere Annäherung.
Der nächste Wert ``x_1`` wird dann als Mittelwert von ``x_0`` und ``b`` ermittelt.
Allgemein ergibt sich daraus der Ausdruck

```math
x_{n+1} = \frac{x_n + \frac{a}{x_n}}{2}.
```

Für eine ausreichend hohe Zahl von ``n`` kann damit die Quadratwurzel von ``a`` ermittelt werden.
Es soll eine Funktion definiert werden, die mit dem beschriebene Verfahren die Quadratwurzel einer beliebigen Zahl mit einem absoluten Fehler von ``10^{-5}`` berechnet. Ein solches Abbruchkriterium wir auch Konvergenzkriterium genannt.

[^3]: <https://de.wikipedia.org/wiki/Heron-Verfahren>

```julia; results="hidden"; echo=false
function bsqrt(a)
    x = a/2
    while abs(x*x-a) > 1e-5
        x = (x+a/x)/2
    end
    return x
end
```

Beispiele:
```julia; term=true
bsqrt(9)
bsqrt(103.12)
```

### Dictionaries zusammenfügen
Schreibe eine Funktion `dict_merge` die zwei Dicts vom gleichen Typ als Argumente nimmt, diese beiden Dictionaries zusammenführt (merged) und als return value zurückgibt.
Sind Keys in beiden `Dicts` vorhanden sollen die Werte aus dem ersten mit den Werten aus dem zweiten `Dict` überschrieben werden.

```julia; results="hidden"; echo=false
function dict_merge(d1, d2)
    d = copy(d1)
    for k in keys(d2)
        d[k] = d2[k]
    end
    return d
end
```
```julia;term=true
d1 = Dict("Hans"=>85.3,"Michael"=>74.9)
d2 = Dict("Lisa"=>56.1,"Anna"=>68.1)
dict_merge(d1, d2)
```
