# Spezielle Datentypen
## Datum und Uhrzeiten

Das korrekte Behandeln von Datumsangabe und Uhrzeiten ist grundsätzlich nicht die größte Herausforderung, allerdings gibt es einige Parameter zu beachten, wenn mit Daten und Zeitangaben gerechnet wird.
Julia bietet für diesen Zweck das `Dates`-Paket, das in der *Standard Library* enthalten ist und mit

```julia
using Dates
```

geladen werden kann.

Die beiden Haupttypen des `Dates`-Pakets sind `Date` (minimale Angabe in Tagen z.B. `1.2.2019`) und `DateTime` (minimale Angabe in ms z.B. `1.2.2019 12:30:59.001`).
Die Eingabe eines Datums bzw. eines Datums mit Uhrzeit erfolgt immer in der Reihenfolge Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde.

```julia; term=true
Date(2019,2,1)
DateTime(2019,2,1)
DateTime(2019,2,1,12,30,59,1)
```

Wird eine Stelle bei der Definition vernachlässigt wird stattdessen der kleinst mögliche Wert verwendet:

```julia
Date(2019)
```

Zwischen zwei Datums- oder Zeitangaben (die auf einen exakten Zeitpunkt hinweisen) sind die folgenden Regeln definiert:

```julia; term=true
date1 = Date(2019,2,1)
date2 = Date(2019,6,12)
date1 > date2
date1 == date2
date1 != date2
date2 - date1
datetime1 = DateTime(2019,2,1)
datetime2 = DateTime(2019,6,12,13,1)
datetime2-datetime1
```

Die beiden gezeigten Subtraktionen ergeben die Zeitspanne zwischen den beiden Zeitpunkten, jeweils in der kleinst möglichen Auflösung.
Solche Zeitspannen (auch in anderer Auflösung z.B. Jahr oder Monat) sind auch im `Dates`-Paket enthalten.

```julia; term=true
Dates.Year(2)
Dates.Month(3)
Dates.Day(1)
Dates.Hour(4)
Dates.Minute(8)
Dates.Second(12)
Dates.Millisecond(80)
```

In Kombination mit einer Zeitspanne zeigt sich, wie praktisch das Paket sein kann. 
Neben der Subtraktion ist für Zeitspanne und Zeitpunkt auch die Addition definiert:

```julia; term=true
Date(2019,1,1) + Dates.Day(3)
Date(2019,1,1) - Dates.Day(1)
Date(2019,1,31) + Dates.Month(1)
```

Zusätzlich funktionieren auch die Angabe von Datumsbereichen wie gewohnt:

```julia; term=true
collect(Date(2019,1,1):Dates.Day(2):Date(2019,1,10))
```

Jeder Zeitspanne und jedes Datum werden durch eine zugeordnete Einheit (Tag, Monat, Jahr) und eine Integer festgelegt.
In manchen Fällen ist es notwendig, diese Integer zu extrahieren.
Für Zeitspannen gibt es dafür die Funktion `Dates.value`:

```julia; term=true
d1 = Dates.Day(10)
d2 = Dates.Month(10)
d1 == d2
Dates.value(d1) == Dates.value(d2)
```

Für Datums und Zeitangabe die Funktionen:
```julia; term=true
dt = DateTime(2019,6,12,13,1)
Dates.year(dt)
Dates.month(dt)
Dates.day(dt)
Dates.hour(dt)
Dates.minute(dt)
Dates.second(dt)
Dates.millisecond(dt)
```

## Spezielle Zahlentypen

Aufgrund einiger Basisregeln nach denen in Julia programmiert wird, eignet sich die Sprache besonders dafür erweitert zu werden.
In der Julia Paketdatenbank befindet sich eine Vielzahl von praktischen Paketen, welche die Standardfunktionalität erweitern.
Zwei davon sind:
- `Unitful.jl`[^2], das physikalische Einheiten definiert und
- `Measurements.jl`[^3], das Berechnungen mit Fehlertoleranzen erlaubt.

[^2]: <http://painterqubits.github.io/Unitful.jl/stable/>
[^3]: <https://juliaphysics.github.io/Measurements.jl/stable/>

Beide Paket definieren eine neue Art Zahlen anzugeben, basieren aber weiterhin auf den Rechenregeln die in Julia definiert sind.
Als Beispiel wird eine Funktion definiert die den Flächeninhalt eines Rechtecks berechnet:

```julia
A_rechteck(h,b) = h*b
```

Wie gewohnt kann die Funktion mit unterschiedlichen Zahlen, z.B. `Float64` oder `Int`, aufgerufen werden:

```julia; term=true
A_rechteck(2.1,3.1)
A_rechteck(2,3)
```

Mit `Unitful.jl` ist es möglich Zahlen mit einer Einheit zu versehen:
```julia; term=true
using Unitful
1u"m"
1u"cm"
force = 12u"kg"*9.81u"m/s^2"
force == 117.72u"N"
```

Der neue Zahlentyp lässt sich jetzt auch mit der Funktion `A_rechteck` verwenden:
```julia; term=true
fläche = A_rechteck(2u"m",11.1u"cm")
uconvert(u"mm^2",fläche)
```

Mit `Measurements.jl` können Fehler bzw. Abweichungen einer Zahl einfach durch das Symbol `±` (`\pm`+`TAB`-Taste) berücksichtigt werden:
```julia;term=true
using Measurements
a = 1.1±0.1
b = 2.1±0.05
a+b
sin(a)
```

Das Paket geht dabei von normalverteilten Variablen aus; der Wert nach `±` ist die Standardabweichung.
Die Variable `a` im obigen Beispiel bezeichnet daher eine normalverteilte Variable mit Mittelwert `1.1` und Standardabweichung `0.1`

Bei der Verwendung von `A_rechteck` kann mit `Measurements.jl` der Fehler bei der Berechnung der Fläche, unter Berücksichtigung des Fehlers der Seiten ermittelt werden:
```julia; term=true
A_rechteck(2±0.1,3±0.5)
```


## Aufgaben
### Ein Zeiträtsel

Jemand verwechselt Tages- und Monatszahl und erscheint daher sechs Wochen zu früh zu einem Termin. 
An welchem Tag ist der Termin eigentlich?[^1].
Schreibe eine Funktion die den entsprechenden Tag zurückgibt. Verwende für die Lösung die arithmetischen Funktionen für Daten.

[^1]: <https://www.spektrum.de/raetsel/melusines-geburtstag/1660200>
